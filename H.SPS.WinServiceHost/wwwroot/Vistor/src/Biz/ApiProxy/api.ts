/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * 访客机后台接口
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: sz_jsw51@jieshun.cn
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface EnumValue
 */
export interface EnumValue {
    /**
     * 
     * @type {number}
     * @memberof EnumValue
     */
    intValue?: number;
    /**
     * 
     * @type {string}
     * @memberof EnumValue
     */
    displayName?: string;
}

/**
 * 
 * @export
 * @interface ObjectField
 */
export interface ObjectField {
    /**
     * 
     * @type {string}
     * @memberof ObjectField
     */
    fieldType?: string;
    /**
     * 
     * @type {string}
     * @memberof ObjectField
     */
    fieldName?: string;
    /**
     * 
     * @type {string}
     * @memberof ObjectField
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof ObjectField
     */
    errorMessage?: string;
    /**
     * 
     * @type {any}
     * @memberof ObjectField
     */
    currentValue?: any;
    /**
     * 
     * @type {number}
     * @memberof ObjectField
     */
    listStyle?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ObjectField
     */
    selectable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ObjectField
     */
    editable?: boolean;
    /**
     * 
     * @type {Array&lt;EnumValue&gt;}
     * @memberof ObjectField
     */
    enumValues?: Array<EnumValue>;
    /**
     * 
     * @type {number}
     * @memberof ObjectField
     */
    enumStyle?: number;
    /**
     * 
     * @type {Array&lt;ValidItem&gt;}
     * @memberof ObjectField
     */
    validItems?: Array<ValidItem>;
}

/**
 * 
 * @export
 * @interface ObjectModel
 */
export interface ObjectModel {
    /**
     * 
     * @type {string}
     * @memberof ObjectModel
     */
    fieldType?: string;
    /**
     * 
     * @type {string}
     * @memberof ObjectModel
     */
    fieldName?: string;
    /**
     * 
     * @type {string}
     * @memberof ObjectModel
     */
    label?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ObjectModel
     */
    isList?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ObjectModel
     */
    isListItem?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ObjectModel
     */
    addDeleteable?: boolean;
    /**
     * 
     * @type {Array&lt;ObjectModel&gt;}
     * @memberof ObjectModel
     */
    children?: Array<ObjectModel>;
    /**
     * 
     * @type {Array&lt;ObjectModel&gt;}
     * @memberof ObjectModel
     */
    addableModels?: Array<ObjectModel>;
    /**
     * 
     * @type {Array&lt;ObjectField&gt;}
     * @memberof ObjectModel
     */
    fieldList?: Array<ObjectField>;
}

/**
 * 提交取凭证的记录请求参数
 * @export
 * @interface PostPickVoucherRecordReq
 */
export interface PostPickVoucherRecordReq {
    /**
     * 第三方返回的GUID
     * @type {string}
     * @memberof PostPickVoucherRecordReq
     */
    recordGUID?: string;
    /**
     * 取票时间
     * @type {Date}
     * @memberof PostPickVoucherRecordReq
     */
    pickTime?: Date;
    /**
     * 取票抓拍的图片
     * @type {string}
     * @memberof PostPickVoucherRecordReq
     */
    pickImageUrl?: string;
}

/**
 * 提交取凭证的记录返回内容
 * @export
 * @interface PostPickVoucherRecordRes
 */
export interface PostPickVoucherRecordRes {
    /**
     * 返回码
     * @type {number}
     * @memberof PostPickVoucherRecordRes
     */
    returnCode?: number;
    /**
     * 返回消息
     * @type {string}
     * @memberof PostPickVoucherRecordRes
     */
    message?: string;
}

/**
 * 提访客申请请求参数
 * @export
 * @interface PostVistorInfoReq
 */
export interface PostVistorInfoReq {
    /**
     * 访客登记信息
     * @type {VistorInfo}
     * @memberof PostVistorInfoReq
     */
    vistorInfo?: VistorInfo;
}

/**
 * 提访客申请返回内容
 * @export
 * @interface PostVistorInfoRes
 */
export interface PostVistorInfoRes {
    /**
     * 审批结果
     * @type {VistorApproveResult}
     * @memberof PostVistorInfoRes
     */
    approveResult?: VistorApproveResult;
    /**
     * 返回码
     * @type {number}
     * @memberof PostVistorInfoRes
     */
    returnCode?: number;
    /**
     * 返回消息
     * @type {string}
     * @memberof PostVistorInfoRes
     */
    message?: string;
}

/**
 * 获取时间请求参数
 * @export
 * @interface QueryCurrentTimeReq
 */
export interface QueryCurrentTimeReq {
    /**
     * 当前时间
     * @type {Date}
     * @memberof QueryCurrentTimeReq
     */
    currentTime?: Date;
}

/**
 * 获取时间返回结果
 * @export
 * @interface QueryCurrentTimeRes
 */
export interface QueryCurrentTimeRes {
    /**
     * 当前时间
     * @type {Date}
     * @memberof QueryCurrentTimeRes
     */
    currentTime?: Date;
    /**
     * 返回码
     * @type {number}
     * @memberof QueryCurrentTimeRes
     */
    returnCode?: number;
    /**
     * 返回消息
     * @type {string}
     * @memberof QueryCurrentTimeRes
     */
    message?: string;
}

/**
 * 获取访客申请结果请求参数
 * @export
 * @interface QueryVistorApproveResultReq
 */
export interface QueryVistorApproveResultReq {
    /**
     * 请求的类型，0：身份证号 1:取证码
     * @type {number}
     * @memberof QueryVistorApproveResultReq
     */
    requestType?: number;
    /**
     * 身份证号
     * @type {string}
     * @memberof QueryVistorApproveResultReq
     */
    idno?: string;
    /**
     * 取证码
     * @type {string}
     * @memberof QueryVistorApproveResultReq
     */
    code?: string;
}

/**
 * 获取访客申请结果返回内容
 * @export
 * @interface QueryVistorApproveResultRes
 */
export interface QueryVistorApproveResultRes {
    /**
     * 返回未过期的记录
     * @type {Array&lt;VistorApproveResult&gt;}
     * @memberof QueryVistorApproveResultRes
     */
    records?: Array<VistorApproveResult>;
    /**
     * 返回码
     * @type {number}
     * @memberof QueryVistorApproveResultRes
     */
    returnCode?: number;
    /**
     * 返回消息
     * @type {string}
     * @memberof QueryVistorApproveResultRes
     */
    message?: string;
}

/**
 * 获取访客机操作员信息请求参数
 * @export
 * @interface QueryVistorOperatorReq
 */
export interface QueryVistorOperatorReq {
    /**
     * 操作员编号，例如：9999
     * @type {string}
     * @memberof QueryVistorOperatorReq
     */
    no?: string;
    /**
     * 操作员密码
     * @type {string}
     * @memberof QueryVistorOperatorReq
     */
    pwd?: string;
}

/**
 * 获取访客机操作员信息返回结果
 * @export
 * @interface QueryVistorOperatorRes
 */
export interface QueryVistorOperatorRes {
    /**
     * 操作员信息
     * @type {VistorOperatorInfo}
     * @memberof QueryVistorOperatorRes
     */
    operator?: VistorOperatorInfo;
    /**
     * 返回码
     * @type {number}
     * @memberof QueryVistorOperatorRes
     */
    returnCode?: number;
    /**
     * 返回消息
     * @type {string}
     * @memberof QueryVistorOperatorRes
     */
    message?: string;
}

/**
 * 按条件模糊查询被放人请求参数
 * @export
 * @interface QueryVistorPersonInfoReq
 */
export interface QueryVistorPersonInfoReq {
    /**
     * 0:手机 1:姓名
     * @type {number}
     * @memberof QueryVistorPersonInfoReq
     */
    requestType?: number;
    /**
     * 手机号码
     * @type {string}
     * @memberof QueryVistorPersonInfoReq
     */
    mobile?: string;
    /**
     * 姓名
     * @type {string}
     * @memberof QueryVistorPersonInfoReq
     */
    name?: string;
}

/**
 * 按条件查询被放人返回结果
 * @export
 * @interface QueryVistorPersonInfoRes
 */
export interface QueryVistorPersonInfoRes {
    /**
     * 相似的人事资料
     * @type {Array&lt;VistorPersonInfo&gt;}
     * @memberof QueryVistorPersonInfoRes
     */
    personList?: Array<VistorPersonInfo>;
    /**
     * 返回码
     * @type {number}
     * @memberof QueryVistorPersonInfoRes
     */
    returnCode?: number;
    /**
     * 返回消息
     * @type {string}
     * @memberof QueryVistorPersonInfoRes
     */
    message?: string;
}

/**
 * 获取访客当日统计数据请求参数
 * @export
 * @interface QueryVistorStatisticsReq
 */
export interface QueryVistorStatisticsReq {
}

/**
 * 获取访客当日统计数据返回内容
 * @export
 * @interface QueryVistorStatisticsRes
 */
export interface QueryVistorStatisticsRes {
    /**
     * 当日申请人数
     * @type {number}
     * @memberof QueryVistorStatisticsRes
     */
    applyCount?: number;
    /**
     * 当日到访人数
     * @type {number}
     * @memberof QueryVistorStatisticsRes
     */
    arrivedCount?: number;
}

/**
 * 获取访客机策略请求参数
 * @export
 * @interface QueryVistorStrategyReq
 */
export interface QueryVistorStrategyReq {
}

/**
 * 获取访客机策略返回内容
 * @export
 * @interface QueryVistorStrategyRes
 */
export interface QueryVistorStrategyRes {
    /**
     * 访客机策略
     * @type {VistorStrategyInfo}
     * @memberof QueryVistorStrategyRes
     */
    strategy?: VistorStrategyInfo;
    /**
     * 返回码
     * @type {number}
     * @memberof QueryVistorStrategyRes
     */
    returnCode?: number;
    /**
     * 返回消息
     * @type {string}
     * @memberof QueryVistorStrategyRes
     */
    message?: string;
}

/**
 * 响应信息
 * @export
 * @interface ResponseInfo
 */
export interface ResponseInfo {
    /**
     * 返回码
     * @type {number}
     * @memberof ResponseInfo
     */
    returnCode?: number;
    /**
     * 返回消息
     * @type {string}
     * @memberof ResponseInfo
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface ValidItem
 */
export interface ValidItem {
    /**
     * 
     * @type {string}
     * @memberof ValidItem
     */
    validMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof ValidItem
     */
    validType?: string;
    /**
     * 
     * @type {any}
     * @memberof ValidItem
     */
    validValue1?: any;
    /**
     * 
     * @type {any}
     * @memberof ValidItem
     */
    validValue2?: any;
}

/**
 * 访客审批记录
 * @export
 * @interface VistorApproveResult
 */
export interface VistorApproveResult {
    /**
     * //第三方系统的GUID
     * @type {string}
     * @memberof VistorApproveResult
     */
    guid?: string;
    /**
     * 申请时的提交的GUID
     * @type {string}
     * @memberof VistorApproveResult
     */
    applyGuid?: string;
    /**
     * 访客信息
     * @type {VistorInfo}
     * @memberof VistorApproveResult
     */
    vistorInfo?: VistorInfo;
    /**
     * 审批结果
     * @type {number}
     * @memberof VistorApproveResult
     */
    result?: VistorApproveResult.ResultEnum;
    /**
     * 同行二维码
     * @type {string}
     * @memberof VistorApproveResult
     */
    qrCode?: string;
}

/**
 * @export
 * @namespace VistorApproveResult
 */
export namespace VistorApproveResult {
    /**
     * @export
     * @enum {string}
     */
    export enum ResultEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2
    }
}

/**
 * 访客登记信息，姓名、证件、被放人、日期、随行人员
 * @export
 * @interface VistorInfo
 */
export interface VistorInfo {
    /**
     * 申请记录的GUID
     * @type {string}
     * @memberof VistorInfo
     */
    applyGuid?: string;
    /**
     * 访客姓名
     * @type {string}
     * @memberof VistorInfo
     */
    userName?: string;
    /**
     * 证件类型，0为II代身份证
     * @type {number}
     * @memberof VistorInfo
     */
    identifyType?: number;
    /**
     * 访客身份证
     * @type {string}
     * @memberof VistorInfo
     */
    idno?: string;
    /**
     * 身份证地址
     * @type {string}
     * @memberof VistorInfo
     */
    address?: string;
    /**
     * 性别
     * @type {string}
     * @memberof VistorInfo
     */
    sex?: string;
    /**
     * 访客手机号
     * @type {string}
     * @memberof VistorInfo
     */
    mobile?: string;
    /**
     * 人像图集（一般只有一个）
     * @type {Array&lt;string&gt;}
     * @memberof VistorInfo
     */
    imageUrls?: Array<string>;
    /**
     * 被访人姓名
     * @type {string}
     * @memberof VistorInfo
     */
    vistorPersonName?: string;
    /**
     * 被访人手机
     * @type {string}
     * @memberof VistorInfo
     */
    vistorPersonMobile?: string;
    /**
     * 被访人部门
     * @type {string}
     * @memberof VistorInfo
     */
    vistorDeptName?: string;
    /**
     * 被访人的GUID
     * @type {string}
     * @memberof VistorInfo
     */
    vistorPersonGUID?: string;
    /**
     * 随行人数
     * @type {number}
     * @memberof VistorInfo
     */
    entourageCount?: number;
    /**
     * 车牌号码
     * @type {string}
     * @memberof VistorInfo
     */
    carNO?: string;
    /**
     * 来访事由
     * @type {string}
     * @memberof VistorInfo
     */
    vistorReason?: string;
    /**
     * 来访日期
     * @type {Date}
     * @memberof VistorInfo
     */
    vistorDateFrom?: Date;
    /**
     * 预计离开时间
     * @type {Date}
     * @memberof VistorInfo
     */
    vistorDateTo?: Date;
    /**
     * 访问开始时间
     * @type {string}
     * @memberof VistorInfo
     */
    vistorTimeFrom?: string;
    /**
     * 访问结束时间
     * @type {string}
     * @memberof VistorInfo
     */
    vistorTimeTo?: string;
    /**
     * 申请日期
     * @type {Date}
     * @memberof VistorInfo
     */
    applyDate?: Date;
}

/**
 * 操作员信息
 * @export
 * @interface VistorOperatorInfo
 */
export interface VistorOperatorInfo {
    /**
     * 操作员姓名
     * @type {string}
     * @memberof VistorOperatorInfo
     */
    name?: string;
}

/**
 * 人事资料（被访人）
 * @export
 * @interface VistorPersonInfo
 */
export interface VistorPersonInfo {
    /**
     * 被访人的GUID
     * @type {string}
     * @memberof VistorPersonInfo
     */
    guid?: string;
    /**
     * 被访人部门
     * @type {string}
     * @memberof VistorPersonInfo
     */
    deptName?: string;
    /**
     * 被访人手机
     * @type {string}
     * @memberof VistorPersonInfo
     */
    mobile?: string;
    /**
     * 被访人姓名
     * @type {string}
     * @memberof VistorPersonInfo
     */
    name?: string;
}

/**
 * 访客系统策略
 * @export
 * @interface VistorStrategyInfo
 */
export interface VistorStrategyInfo {
    /**
     * 可访问时段开始
     * @type {string}
     * @memberof VistorStrategyInfo
     */
    periodFrom?: string;
    /**
     * 可访问时段结束
     * @type {string}
     * @memberof VistorStrategyInfo
     */
    periodEnd?: string;
}


/**
 * SystemApi - fetch parameter creator
 * @export
 */
export const SystemApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取系统设置的元数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigModel(options: any = {}): FetchArgs {
            const localVarPath = `/System/GetConfigModel`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据元数据生成系统设置
         * @param {ObjectModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveConfigModel(model?: ObjectModel, options: any = {}): FetchArgs {
            const localVarPath = `/System/SaveConfigModel`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ObjectModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取系统设置的元数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigModel(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ObjectModel> {
            const localVarFetchArgs = SystemApiFetchParamCreator(configuration).getConfigModel(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 根据元数据生成系统设置
         * @param {ObjectModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveConfigModel(model?: ObjectModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResponseInfo> {
            const localVarFetchArgs = SystemApiFetchParamCreator(configuration).saveConfigModel(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 获取系统设置的元数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigModel(options?: any) {
            return SystemApiFp(configuration).getConfigModel(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 根据元数据生成系统设置
         * @param {ObjectModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveConfigModel(model?: ObjectModel, options?: any) {
            return SystemApiFp(configuration).saveConfigModel(model, options)(fetch, basePath);
        },
    };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * 
     * @summary 获取系统设置的元数据
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getConfigModel(options?: any) {
        return SystemApiFp(this.configuration).getConfigModel(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 根据元数据生成系统设置
     * @param {} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public saveConfigModel(model?: ObjectModel, options?: any) {
        return SystemApiFp(this.configuration).saveConfigModel(model, options)(this.fetch, this.basePath);
    }

}

/**
 * TestApi - fetch parameter creator
 * @export
 */
export const TestApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testGet(options: any = {}): FetchArgs {
            const localVarPath = `/Test`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = TestApiFetchParamCreator(configuration).testGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testGet(options?: any) {
            return TestApiFp(configuration).testGet(options)(fetch, basePath);
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public testGet(options?: any) {
        return TestApiFp(this.configuration).testGet(options)(this.fetch, this.basePath);
    }

}

/**
 * VistorApi - fetch parameter creator
 * @export
 */
export const VistorApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 提交取访客凭证记录（已打印，保存记录）
         * @param {PostPickVoucherRecordReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPickVoucherRecord(req?: PostPickVoucherRecordReq, options: any = {}): FetchArgs {
            const localVarPath = `/Vistor/PostPickVoucherRecord`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PostPickVoucherRecordReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(req || {}) : (req || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 提交访客申请
         * @param {PostVistorInfoReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVistorInfo(req?: PostVistorInfoReq, options: any = {}): FetchArgs {
            const localVarPath = `/Vistor/PostVistorInfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PostVistorInfoReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(req || {}) : (req || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 从第三方获取系统实现，如第三方没有实现就获取服务器时间
         * @param {QueryCurrentTimeReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCurrentTime(req?: QueryCurrentTimeReq, options: any = {}): FetchArgs {
            const localVarPath = `/Vistor/QueryCurrentTime`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"QueryCurrentTimeReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(req || {}) : (req || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取访客机的申请的记录
         * @param {QueryVistorApproveResultReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorApproveResult(req?: QueryVistorApproveResultReq, options: any = {}): FetchArgs {
            const localVarPath = `/Vistor/QueryVistorApproveResult`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"QueryVistorApproveResultReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(req || {}) : (req || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 登录，返回操作员信息
         * @param {QueryVistorOperatorReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorOperator(req?: QueryVistorOperatorReq, options: any = {}): FetchArgs {
            const localVarPath = `/Vistor/QueryVistorOperator`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"QueryVistorOperatorReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(req || {}) : (req || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 登录，返回操作员信息
         * @param {QueryVistorPersonInfoReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorPersonInfo(req?: QueryVistorPersonInfoReq, options: any = {}): FetchArgs {
            const localVarPath = `/Vistor/QueryVistorPersonInfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"QueryVistorPersonInfoReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(req || {}) : (req || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取访客当日统计数据请求参数
         * @param {QueryVistorStatisticsReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorStatistics(req?: QueryVistorStatisticsReq, options: any = {}): FetchArgs {
            const localVarPath = `/Vistor/QueryVistorStatistics`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"QueryVistorStatisticsReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(req || {}) : (req || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 加载访客系统策略
         * @param {QueryVistorStrategyReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorStrategy(req?: QueryVistorStrategyReq, options: any = {}): FetchArgs {
            const localVarPath = `/Vistor/QueryVistorStrategy`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"QueryVistorStrategyReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(req || {}) : (req || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VistorApi - functional programming interface
 * @export
 */
export const VistorApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 提交取访客凭证记录（已打印，保存记录）
         * @param {PostPickVoucherRecordReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPickVoucherRecord(req?: PostPickVoucherRecordReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PostPickVoucherRecordRes> {
            const localVarFetchArgs = VistorApiFetchParamCreator(configuration).postPickVoucherRecord(req, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 提交访客申请
         * @param {PostVistorInfoReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVistorInfo(req?: PostVistorInfoReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PostVistorInfoRes> {
            const localVarFetchArgs = VistorApiFetchParamCreator(configuration).postVistorInfo(req, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 从第三方获取系统实现，如第三方没有实现就获取服务器时间
         * @param {QueryCurrentTimeReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCurrentTime(req?: QueryCurrentTimeReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<QueryCurrentTimeRes> {
            const localVarFetchArgs = VistorApiFetchParamCreator(configuration).queryCurrentTime(req, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取访客机的申请的记录
         * @param {QueryVistorApproveResultReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorApproveResult(req?: QueryVistorApproveResultReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<QueryVistorApproveResultRes> {
            const localVarFetchArgs = VistorApiFetchParamCreator(configuration).queryVistorApproveResult(req, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 登录，返回操作员信息
         * @param {QueryVistorOperatorReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorOperator(req?: QueryVistorOperatorReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<QueryVistorOperatorRes> {
            const localVarFetchArgs = VistorApiFetchParamCreator(configuration).queryVistorOperator(req, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 登录，返回操作员信息
         * @param {QueryVistorPersonInfoReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorPersonInfo(req?: QueryVistorPersonInfoReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<QueryVistorPersonInfoRes> {
            const localVarFetchArgs = VistorApiFetchParamCreator(configuration).queryVistorPersonInfo(req, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取访客当日统计数据请求参数
         * @param {QueryVistorStatisticsReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorStatistics(req?: QueryVistorStatisticsReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<QueryVistorStatisticsRes> {
            const localVarFetchArgs = VistorApiFetchParamCreator(configuration).queryVistorStatistics(req, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 加载访客系统策略
         * @param {QueryVistorStrategyReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorStrategy(req?: QueryVistorStrategyReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<QueryVistorStrategyRes> {
            const localVarFetchArgs = VistorApiFetchParamCreator(configuration).queryVistorStrategy(req, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * VistorApi - factory interface
 * @export
 */
export const VistorApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 提交取访客凭证记录（已打印，保存记录）
         * @param {PostPickVoucherRecordReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPickVoucherRecord(req?: PostPickVoucherRecordReq, options?: any) {
            return VistorApiFp(configuration).postPickVoucherRecord(req, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 提交访客申请
         * @param {PostVistorInfoReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVistorInfo(req?: PostVistorInfoReq, options?: any) {
            return VistorApiFp(configuration).postVistorInfo(req, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 从第三方获取系统实现，如第三方没有实现就获取服务器时间
         * @param {QueryCurrentTimeReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCurrentTime(req?: QueryCurrentTimeReq, options?: any) {
            return VistorApiFp(configuration).queryCurrentTime(req, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取访客机的申请的记录
         * @param {QueryVistorApproveResultReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorApproveResult(req?: QueryVistorApproveResultReq, options?: any) {
            return VistorApiFp(configuration).queryVistorApproveResult(req, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 登录，返回操作员信息
         * @param {QueryVistorOperatorReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorOperator(req?: QueryVistorOperatorReq, options?: any) {
            return VistorApiFp(configuration).queryVistorOperator(req, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 登录，返回操作员信息
         * @param {QueryVistorPersonInfoReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorPersonInfo(req?: QueryVistorPersonInfoReq, options?: any) {
            return VistorApiFp(configuration).queryVistorPersonInfo(req, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取访客当日统计数据请求参数
         * @param {QueryVistorStatisticsReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorStatistics(req?: QueryVistorStatisticsReq, options?: any) {
            return VistorApiFp(configuration).queryVistorStatistics(req, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 加载访客系统策略
         * @param {QueryVistorStrategyReq} [req] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorStrategy(req?: QueryVistorStrategyReq, options?: any) {
            return VistorApiFp(configuration).queryVistorStrategy(req, options)(fetch, basePath);
        },
    };
};

/**
 * VistorApi - object-oriented interface
 * @export
 * @class VistorApi
 * @extends {BaseAPI}
 */
export class VistorApi extends BaseAPI {
    /**
     * 
     * @summary 提交取访客凭证记录（已打印，保存记录）
     * @param {} [req] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VistorApi
     */
    public postPickVoucherRecord(req?: PostPickVoucherRecordReq, options?: any) {
        return VistorApiFp(this.configuration).postPickVoucherRecord(req, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 提交访客申请
     * @param {} [req] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VistorApi
     */
    public postVistorInfo(req?: PostVistorInfoReq, options?: any) {
        return VistorApiFp(this.configuration).postVistorInfo(req, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 从第三方获取系统实现，如第三方没有实现就获取服务器时间
     * @param {} [req] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VistorApi
     */
    public queryCurrentTime(req?: QueryCurrentTimeReq, options?: any) {
        return VistorApiFp(this.configuration).queryCurrentTime(req, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取访客机的申请的记录
     * @param {} [req] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VistorApi
     */
    public queryVistorApproveResult(req?: QueryVistorApproveResultReq, options?: any) {
        return VistorApiFp(this.configuration).queryVistorApproveResult(req, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 登录，返回操作员信息
     * @param {} [req] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VistorApi
     */
    public queryVistorOperator(req?: QueryVistorOperatorReq, options?: any) {
        return VistorApiFp(this.configuration).queryVistorOperator(req, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 登录，返回操作员信息
     * @param {} [req] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VistorApi
     */
    public queryVistorPersonInfo(req?: QueryVistorPersonInfoReq, options?: any) {
        return VistorApiFp(this.configuration).queryVistorPersonInfo(req, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取访客当日统计数据请求参数
     * @param {} [req] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VistorApi
     */
    public queryVistorStatistics(req?: QueryVistorStatisticsReq, options?: any) {
        return VistorApiFp(this.configuration).queryVistorStatistics(req, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 加载访客系统策略
     * @param {} [req] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VistorApi
     */
    public queryVistorStrategy(req?: QueryVistorStrategyReq, options?: any) {
        return VistorApiFp(this.configuration).queryVistorStrategy(req, options)(this.fetch, this.basePath);
    }

}

