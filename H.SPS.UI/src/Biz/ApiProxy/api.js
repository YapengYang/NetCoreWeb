"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * 访客机后台接口
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: sz_jsw51@jieshun.cn
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const portableFetch = require("portable-fetch");
const BASE_PATH = "https://localhost".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, fetch = portableFetch) {
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
    }
}
exports.RequiredError = RequiredError;
/**
 * @export
 * @namespace VistorApproveResult
 */
var VistorApproveResult;
(function (VistorApproveResult) {
    /**
     * @export
     * @enum {string}
     */
    let ResultEnum;
    (function (ResultEnum) {
        ResultEnum[ResultEnum["NUMBER_0"] = 0] = "NUMBER_0";
        ResultEnum[ResultEnum["NUMBER_1"] = 1] = "NUMBER_1";
        ResultEnum[ResultEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(ResultEnum = VistorApproveResult.ResultEnum || (VistorApproveResult.ResultEnum = {}));
})(VistorApproveResult = exports.VistorApproveResult || (exports.VistorApproveResult = {}));
/**
 * SystemApi - fetch parameter creator
 * @export
 */
exports.SystemApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 获取系统设置的元数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigModel(options = {}) {
            const localVarPath = `/System/GetConfigModel`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 根据元数据生成系统设置
         * @param {ObjectModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveConfigModel(model, options = {}) {
            const localVarPath = `/System/SaveConfigModel`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ObjectModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SystemApi - functional programming interface
 * @export
 */
exports.SystemApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 获取系统设置的元数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigModel(options) {
            const localVarFetchArgs = exports.SystemApiFetchParamCreator(configuration).getConfigModel(options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 根据元数据生成系统设置
         * @param {ObjectModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveConfigModel(model, options) {
            const localVarFetchArgs = exports.SystemApiFetchParamCreator(configuration).saveConfigModel(model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * SystemApi - factory interface
 * @export
 */
exports.SystemApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 获取系统设置的元数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigModel(options) {
            return exports.SystemApiFp(configuration).getConfigModel(options)(fetch, basePath);
        },
        /**
         *
         * @summary 根据元数据生成系统设置
         * @param {ObjectModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveConfigModel(model, options) {
            return exports.SystemApiFp(configuration).saveConfigModel(model, options)(fetch, basePath);
        },
    };
};
/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
class SystemApi extends BaseAPI {
    /**
     *
     * @summary 获取系统设置的元数据
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    getConfigModel(options) {
        return exports.SystemApiFp(this.configuration).getConfigModel(options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 根据元数据生成系统设置
     * @param {} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    saveConfigModel(model, options) {
        return exports.SystemApiFp(this.configuration).saveConfigModel(model, options)(this.fetch, this.basePath);
    }
}
exports.SystemApi = SystemApi;
/**
 * TestApi - fetch parameter creator
 * @export
 */
exports.TestApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testGet(options = {}) {
            const localVarPath = `/Test`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TestApi - functional programming interface
 * @export
 */
exports.TestApiFp = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testGet(options) {
            const localVarFetchArgs = exports.TestApiFetchParamCreator(configuration).testGet(options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * TestApi - factory interface
 * @export
 */
exports.TestApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testGet(options) {
            return exports.TestApiFp(configuration).testGet(options)(fetch, basePath);
        },
    };
};
/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
class TestApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    testGet(options) {
        return exports.TestApiFp(this.configuration).testGet(options)(this.fetch, this.basePath);
    }
}
exports.TestApi = TestApi;
/**
 * VistorApi - fetch parameter creator
 * @export
 */
exports.VistorApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 提交取访客凭证记录（已打印，保存记录）
         * @param {PostPickVoucherRecordReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPickVoucherRecord(req, options = {}) {
            const localVarPath = `/Vistor/PostPickVoucherRecord`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("PostPickVoucherRecordReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(req || {}) : (req || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 提交访客申请
         * @param {PostVistorInfoReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVistorInfo(req, options = {}) {
            const localVarPath = `/Vistor/PostVistorInfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("PostVistorInfoReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(req || {}) : (req || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 从第三方获取系统实现，如第三方没有实现就获取服务器时间
         * @param {QueryCurrentTimeReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCurrentTime(req, options = {}) {
            const localVarPath = `/Vistor/QueryCurrentTime`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("QueryCurrentTimeReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(req || {}) : (req || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取访客机的申请的记录
         * @param {QueryVistorApproveResultReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorApproveResult(req, options = {}) {
            const localVarPath = `/Vistor/QueryVistorApproveResult`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("QueryVistorApproveResultReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(req || {}) : (req || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 登录，返回操作员信息
         * @param {QueryVistorOperatorReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorOperator(req, options = {}) {
            const localVarPath = `/Vistor/QueryVistorOperator`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("QueryVistorOperatorReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(req || {}) : (req || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 登录，返回操作员信息
         * @param {QueryVistorPersonInfoReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorPersonInfo(req, options = {}) {
            const localVarPath = `/Vistor/QueryVistorPersonInfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("QueryVistorPersonInfoReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(req || {}) : (req || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取访客当日统计数据请求参数
         * @param {QueryVistorStatisticsReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorStatistics(req, options = {}) {
            const localVarPath = `/Vistor/QueryVistorStatistics`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("QueryVistorStatisticsReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(req || {}) : (req || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 加载访客系统策略
         * @param {QueryVistorStrategyReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorStrategy(req, options = {}) {
            const localVarPath = `/Vistor/QueryVistorStrategy`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("QueryVistorStrategyReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(req || {}) : (req || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * VistorApi - functional programming interface
 * @export
 */
exports.VistorApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 提交取访客凭证记录（已打印，保存记录）
         * @param {PostPickVoucherRecordReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPickVoucherRecord(req, options) {
            const localVarFetchArgs = exports.VistorApiFetchParamCreator(configuration).postPickVoucherRecord(req, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 提交访客申请
         * @param {PostVistorInfoReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVistorInfo(req, options) {
            const localVarFetchArgs = exports.VistorApiFetchParamCreator(configuration).postVistorInfo(req, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 从第三方获取系统实现，如第三方没有实现就获取服务器时间
         * @param {QueryCurrentTimeReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCurrentTime(req, options) {
            const localVarFetchArgs = exports.VistorApiFetchParamCreator(configuration).queryCurrentTime(req, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取访客机的申请的记录
         * @param {QueryVistorApproveResultReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorApproveResult(req, options) {
            const localVarFetchArgs = exports.VistorApiFetchParamCreator(configuration).queryVistorApproveResult(req, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 登录，返回操作员信息
         * @param {QueryVistorOperatorReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorOperator(req, options) {
            const localVarFetchArgs = exports.VistorApiFetchParamCreator(configuration).queryVistorOperator(req, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 登录，返回操作员信息
         * @param {QueryVistorPersonInfoReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorPersonInfo(req, options) {
            const localVarFetchArgs = exports.VistorApiFetchParamCreator(configuration).queryVistorPersonInfo(req, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取访客当日统计数据请求参数
         * @param {QueryVistorStatisticsReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorStatistics(req, options) {
            const localVarFetchArgs = exports.VistorApiFetchParamCreator(configuration).queryVistorStatistics(req, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 加载访客系统策略
         * @param {QueryVistorStrategyReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorStrategy(req, options) {
            const localVarFetchArgs = exports.VistorApiFetchParamCreator(configuration).queryVistorStrategy(req, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * VistorApi - factory interface
 * @export
 */
exports.VistorApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 提交取访客凭证记录（已打印，保存记录）
         * @param {PostPickVoucherRecordReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPickVoucherRecord(req, options) {
            return exports.VistorApiFp(configuration).postPickVoucherRecord(req, options)(fetch, basePath);
        },
        /**
         *
         * @summary 提交访客申请
         * @param {PostVistorInfoReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVistorInfo(req, options) {
            return exports.VistorApiFp(configuration).postVistorInfo(req, options)(fetch, basePath);
        },
        /**
         *
         * @summary 从第三方获取系统实现，如第三方没有实现就获取服务器时间
         * @param {QueryCurrentTimeReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCurrentTime(req, options) {
            return exports.VistorApiFp(configuration).queryCurrentTime(req, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取访客机的申请的记录
         * @param {QueryVistorApproveResultReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorApproveResult(req, options) {
            return exports.VistorApiFp(configuration).queryVistorApproveResult(req, options)(fetch, basePath);
        },
        /**
         *
         * @summary 登录，返回操作员信息
         * @param {QueryVistorOperatorReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorOperator(req, options) {
            return exports.VistorApiFp(configuration).queryVistorOperator(req, options)(fetch, basePath);
        },
        /**
         *
         * @summary 登录，返回操作员信息
         * @param {QueryVistorPersonInfoReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorPersonInfo(req, options) {
            return exports.VistorApiFp(configuration).queryVistorPersonInfo(req, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取访客当日统计数据请求参数
         * @param {QueryVistorStatisticsReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorStatistics(req, options) {
            return exports.VistorApiFp(configuration).queryVistorStatistics(req, options)(fetch, basePath);
        },
        /**
         *
         * @summary 加载访客系统策略
         * @param {QueryVistorStrategyReq} [req]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVistorStrategy(req, options) {
            return exports.VistorApiFp(configuration).queryVistorStrategy(req, options)(fetch, basePath);
        },
    };
};
/**
 * VistorApi - object-oriented interface
 * @export
 * @class VistorApi
 * @extends {BaseAPI}
 */
class VistorApi extends BaseAPI {
    /**
     *
     * @summary 提交取访客凭证记录（已打印，保存记录）
     * @param {} [req]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VistorApi
     */
    postPickVoucherRecord(req, options) {
        return exports.VistorApiFp(this.configuration).postPickVoucherRecord(req, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 提交访客申请
     * @param {} [req]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VistorApi
     */
    postVistorInfo(req, options) {
        return exports.VistorApiFp(this.configuration).postVistorInfo(req, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 从第三方获取系统实现，如第三方没有实现就获取服务器时间
     * @param {} [req]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VistorApi
     */
    queryCurrentTime(req, options) {
        return exports.VistorApiFp(this.configuration).queryCurrentTime(req, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取访客机的申请的记录
     * @param {} [req]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VistorApi
     */
    queryVistorApproveResult(req, options) {
        return exports.VistorApiFp(this.configuration).queryVistorApproveResult(req, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 登录，返回操作员信息
     * @param {} [req]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VistorApi
     */
    queryVistorOperator(req, options) {
        return exports.VistorApiFp(this.configuration).queryVistorOperator(req, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 登录，返回操作员信息
     * @param {} [req]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VistorApi
     */
    queryVistorPersonInfo(req, options) {
        return exports.VistorApiFp(this.configuration).queryVistorPersonInfo(req, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取访客当日统计数据请求参数
     * @param {} [req]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VistorApi
     */
    queryVistorStatistics(req, options) {
        return exports.VistorApiFp(this.configuration).queryVistorStatistics(req, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 加载访客系统策略
     * @param {} [req]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VistorApi
     */
    queryVistorStrategy(req, options) {
        return exports.VistorApiFp(this.configuration).queryVistorStrategy(req, options)(this.fetch, this.basePath);
    }
}
exports.VistorApi = VistorApi;
//# sourceMappingURL=api.js.map